// Service s·ª≠ d·ª•ng Service Account ƒë·ªÉ truy c·∫≠p Google Sheets tr√™n Vercel
// S·ª≠ d·ª•ng jose library t∆∞∆°ng th√≠ch v·ªõi browser

import * as jose from 'jose';

export interface ServiceAccountConfig {
  spreadsheetId: string;
  clientEmail: string;
  privateKey: string;
}

class GoogleServiceAccountVercelService {
  private config: ServiceAccountConfig | null = null;
  private accessToken: string | null = null;
  private tokenExpiry: number | null = null;

  setConfig(config: ServiceAccountConfig) {
    this.config = config;
  }

  // T·∫°o JWT token t·ª´ service account credentials
  private async createJWT(): Promise<string> {
    if (!this.config) {
      throw new Error('Ch∆∞a c·∫•u h√¨nh Service Account');
    }

    const { clientEmail, privateKey } = this.config;
    const now = Math.floor(Date.now() / 1000);
    const expiry = now + 3600; // 1 gi·ªù

    try {
      // Import private key
      const key = await jose.importPKCS8(privateKey, 'RS256');

      // T·∫°o JWT payload
      const payload = {
        iss: clientEmail,
        scope: 'https://www.googleapis.com/auth/spreadsheets',
        aud: 'https://oauth2.googleapis.com/token',
        exp: expiry,
        iat: now
      };

      // K√Ω JWT
      const token = await new jose.SignJWT(payload)
        .setProtectedHeader({ alg: 'RS256', typ: 'JWT' })
        .setIssuedAt()
        .setExpirationTime(expiry)
        .sign(key);

      return token;
    } catch (error) {
      console.error('L·ªói khi t·∫°o JWT:', error);
      throw new Error('Kh√¥ng th·ªÉ t·∫°o JWT token');
    }
  }

  // L·∫•y access token t·ª´ Google OAuth2
  private async getAccessToken(): Promise<string> {
    if (this.accessToken && this.tokenExpiry && Date.now() < this.tokenExpiry) {
      return this.accessToken;
    }

    try {
      const jwtToken = await this.createJWT();
      
      const response = await fetch('https://oauth2.googleapis.com/token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
          assertion: jwtToken
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('L·ªói OAuth response:', errorText);
        throw new Error(`L·ªói khi l·∫•y access token: ${response.status} ${errorText}`);
      }

      const data = await response.json();
      this.accessToken = data.access_token || null;
      this.tokenExpiry = Date.now() + ((data.expires_in || 3600) * 1000);

      return this.accessToken || '';
    } catch (error) {
      console.error('L·ªói khi l·∫•y access token:', error);
      throw error;
    }
  }

  // Test k·∫øt n·ªëi
  async testConnection(): Promise<boolean> {
    try {
      if (!this.config?.spreadsheetId) {
        throw new Error('Ch∆∞a c·∫•u h√¨nh Spreadsheet ID');
      }

      const accessToken = await this.getAccessToken();
      const response = await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${this.config.spreadsheetId}?fields=properties.title`,
        {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json'
          }
        }
      );

      if (!response.ok) {
        const errorText = await response.text();
        console.error('L·ªói test connection:', errorText);
        throw new Error(`L·ªói khi test k·∫øt n·ªëi: ${response.status} ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi Google Sheets:', data.properties.title);
      return true;
    } catch (error) {
      console.error('‚ùå L·ªói test k·∫øt n·ªëi:', error);
      return false;
    }
  }

  // ƒê·ªçc d·ªØ li·ªáu t·ª´ Google Sheets v·ªõi retry logic
  async readRange(range: string): Promise<any[][]> {
    const maxRetries = 3;
    let lastError: Error | null = null;

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        const accessToken = await this.getAccessToken();
        const response = await fetch(
          `https://sheets.googleapis.com/v4/spreadsheets/${this.config?.spreadsheetId}/values/${range}`,
          {
            headers: {
              'Authorization': `Bearer ${accessToken}`,
              'Content-Type': 'application/json'
            }
          }
        );

        if (response.status === 429) {
          // Rate limiting - wait with exponential backoff
          const waitTime = Math.min(1000 * Math.pow(2, attempt - 1), 10000);
          console.log(`Rate limited (429), waiting ${waitTime}ms before retry ${attempt}/${maxRetries}`);
          await new Promise(resolve => setTimeout(resolve, waitTime));
          continue;
        }

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`L·ªói khi ƒë·ªçc d·ªØ li·ªáu: ${response.status} ${errorText}`);
        }

        const data = await response.json();
        return data.values || [];
      } catch (error) {
        lastError = error as Error;
        console.error(`L·ªói khi ƒë·ªçc range (attempt ${attempt}/${maxRetries}):`, error);
        
        if (attempt < maxRetries) {
          // Wait before retry
          const waitTime = Math.min(1000 * Math.pow(2, attempt - 1), 5000);
          await new Promise(resolve => setTimeout(resolve, waitTime));
        }
      }
    }

    throw lastError || new Error('T·∫•t c·∫£ c√°c l·∫ßn th·ª≠ ƒë·ªÅu th·∫•t b·∫°i');
  }

  // Ghi d·ªØ li·ªáu v√†o Google Sheets v·ªõi retry logic
  async writeRange(range: string, values: any[][]): Promise<void> {
    const maxRetries = 3;
    let lastError: Error | null = null;

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        const accessToken = await this.getAccessToken();
        const response = await fetch(
          `https://sheets.googleapis.com/v4/spreadsheets/${this.config?.spreadsheetId}/values/${range}?valueInputOption=RAW`,
          {
            method: 'PUT',
            headers: {
              'Authorization': `Bearer ${accessToken}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              values: values
            })
          }
        );

        if (response.status === 429) {
          // Rate limiting - wait with exponential backoff
          const waitTime = Math.min(1000 * Math.pow(2, attempt - 1), 10000);
          console.log(`Rate limited (429), waiting ${waitTime}ms before retry ${attempt}/${maxRetries}`);
          await new Promise(resolve => setTimeout(resolve, waitTime));
          continue;
        }

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`L·ªói khi ghi d·ªØ li·ªáu: ${response.status} ${errorText}`);
        }

        console.log('‚úÖ Ghi d·ªØ li·ªáu th√†nh c√¥ng v√†o range:', range);
        return;
      } catch (error) {
        lastError = error as Error;
        console.error(`L·ªói khi ghi range (attempt ${attempt}/${maxRetries}):`, error);
        
        if (attempt < maxRetries) {
          // Wait before retry
          const waitTime = Math.min(1000 * Math.pow(2, attempt - 1), 5000);
          await new Promise(resolve => setTimeout(resolve, waitTime));
        }
      }
    }

    throw lastError || new Error('T·∫•t c·∫£ c√°c l·∫ßn th·ª≠ ƒë·ªÅu th·∫•t b·∫°i');
  }

  // ƒê·ªìng b·ªô d·ªØ li·ªáu l√™n Google Sheets
  async syncToGoogleSheets(localData: any[], sheetName: string): Promise<void> {
    try {
      const sheetRange = `${sheetName}!A:Z`;
      const sheetData = this.convertDataToSheetFormat(localData);
      
      // X√≥a d·ªØ li·ªáu c≈©
      await this.writeRange(sheetRange, []);
      
      // Ghi d·ªØ li·ªáu m·ªõi
      if (sheetData.length > 0) {
        await this.writeRange(sheetRange, sheetData);
      }
      
      console.log(`‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng ${localData.length} b·∫£n ghi l√™n sheet ${sheetName}`);
    } catch (error) {
      console.error(`‚ùå L·ªói khi ƒë·ªìng b·ªô sheet ${sheetName}:`, error);
      throw error;
    }
  }

  // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang ƒë·ªãnh d·∫°ng sheet
  private convertDataToSheetFormat(data: any[]): any[][] {
    if (data.length === 0) return [];

    // L·∫•y headers t·ª´ object ƒë·∫ßu ti√™n
    const headers = Object.keys(data[0]);
    const sheetData = [headers];

    // Th√™m d·ªØ li·ªáu
    data.forEach(item => {
      const row = headers.map(header => item[header] || '');
      sheetData.push(row);
    });

    return sheetData;
  }

  // ƒê·ªìng b·ªô t·∫•t c·∫£ d·ªØ li·ªáu
  async syncAllData(localStorageData: {
    thietBi: any[];
    coSoVatChat: any[];
    lichSuSuDung: any[];
    baoTri: any[];
    thongBao: any[];
    nguoiDung: any[];
  }): Promise<void> {
    try {
      console.log('üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô t·∫•t c·∫£ d·ªØ li·ªáu...');

      // ƒê·ªìng b·ªô t·ª´ng sheet v·ªõi delay ƒë·ªÉ tr√°nh rate limiting
      await this.syncToGoogleSheets(localStorageData.thietBi, 'ThietBi');
      await this.delay(500); // Delay 500ms gi·ªØa c√°c sheet
      
      await this.syncToGoogleSheets(localStorageData.coSoVatChat, 'CoSoVatChat');
      await this.delay(500);
      
      await this.syncToGoogleSheets(localStorageData.lichSuSuDung, 'LichSuSuDung');
      await this.delay(500);
      
      await this.syncToGoogleSheets(localStorageData.baoTri, 'BaoTri');
      await this.delay(500);
      
      await this.syncToGoogleSheets(localStorageData.thongBao, 'ThongBao');
      await this.delay(500);
      
      await this.syncToGoogleSheets(localStorageData.nguoiDung, 'NguoiDung');

      console.log('‚úÖ ƒê·ªìng b·ªô t·∫•t c·∫£ d·ªØ li·ªáu th√†nh c√¥ng!');
    } catch (error) {
      console.error('‚ùå L·ªói khi ƒë·ªìng b·ªô t·∫•t c·∫£ d·ªØ li·ªáu:', error);
      throw error;
    }
  }

  // Helper function ƒë·ªÉ delay
  private async delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // X√≥a c·∫•u h√¨nh
  clearConfig() {
    this.config = null;
    this.accessToken = null;
    this.tokenExpiry = null;
  }
}

export const googleServiceAccountVercelService = new GoogleServiceAccountVercelService();

// Helper functions
export const initializeGoogleServiceAccountVercel = async (
  spreadsheetId: string,
  clientEmail: string,
  privateKey: string
): Promise<boolean> => {
  try {
    googleServiceAccountVercelService.setConfig({ 
      spreadsheetId, 
      clientEmail, 
      privateKey 
    });
    return await googleServiceAccountVercelService.testConnection();
  } catch (error) {
    console.error('‚ùå L·ªói khi kh·ªüi t·∫°o Service Account Vercel:', error);
    return false;
  }
};

export const syncDataWithServiceAccountVercel = async (localStorageData: any): Promise<void> => {
  await googleServiceAccountVercelService.syncAllData(localStorageData);
};

export const testConnectionVercel = async (): Promise<boolean> => {
  return await googleServiceAccountVercelService.testConnection();
}; 