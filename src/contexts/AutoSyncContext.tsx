import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';
import { 
  initializeGoogleSheets, 
  syncDataToGoogleSheets,
  testGoogleSheetsConnection,
  syncDataFromGoogleSheets
} from '../services/googleSheetsService';
import { syncEventService } from '../services/syncEventService';
import { 
  thietBiService, 
  coSoVatChatService, 
  lichSuSuDungService, 
  baoTriService, 
  thongBaoService, 
  nguoiDungService 
} from '../services/localStorage';

interface AutoSyncConfig {
  isEnabled: boolean;
  interval: number; // seconds cho auto sync
  storageMode: 'local' | 'cloud' | 'hybrid';
  syncDirection: 'upload' | 'download' | 'bidirectional'; // Th√™m h∆∞·ªõng ƒë·ªìng b·ªô
  lastDataHash: string; // Hash ƒë·ªÉ ki·ªÉm tra thay ƒë·ªïi
}

interface AutoSyncStatus {
  isRunning: boolean;
  lastSync: string | null;
  error: string | null;
  syncCount: number;
  isConnected: boolean;
  queueLength: number;
  isProcessing: boolean;
  lastDataUpdate: string | null; // Th·ªùi gian c·∫≠p nh·∫≠t d·ªØ li·ªáu cu·ªëi
  dataVersion: number; // Phi√™n b·∫£n d·ªØ li·ªáu
}

interface AutoSyncContextType {
  config: AutoSyncConfig;
  status: AutoSyncStatus;
  updateConfig: (newConfig: Partial<AutoSyncConfig>) => void;
  startAutoSync: () => void;
  stopAutoSync: () => void;
  performManualSync: () => Promise<void>;
  resetStats: () => void;
  forceSync: () => Promise<void>;
  refreshData: () => Promise<void>; // Th√™m function refresh data
  forceDownloadFromSheets: () => Promise<boolean>; // Force download t·ª´ Google Sheets
  showUpdateNotification: boolean; // Th√™m tr·∫°ng th√°i cho th√¥ng b√°o c·∫≠p nh·∫≠t
  isRateLimited: boolean; // Tr·∫°ng th√°i rate limiting
}

const AutoSyncContext = createContext<AutoSyncContextType | undefined>(undefined);

// T·∫°o hash cho d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra thay ƒë·ªïi
const createDataHash = (data: any): string => {
  const dataString = JSON.stringify(data);
  let hash = 0;
  for (let i = 0; i < dataString.length; i++) {
    const char = dataString.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // Convert to 32bit integer
  }
  return hash.toString();
};

// L∆∞u config v√†o localStorage
const saveConfigToStorage = (config: AutoSyncConfig) => {
  localStorage.setItem('autoSyncConfig', JSON.stringify(config));
};

// L·∫•y config t·ª´ localStorage
const getConfigFromStorage = (): AutoSyncConfig => {
  const saved = localStorage.getItem('autoSyncConfig');
  if (saved) {
    try {
      return JSON.parse(saved);
    } catch (error) {
      console.error('L·ªói khi parse auto sync config:', error);
    }
  }
  
  // Default config - ∆∞u ti√™n download t·ª´ Google Sheets
  return {
    isEnabled: true, // B·∫≠t auto sync m·∫∑c ƒë·ªãnh
    interval: 15, // 15 gi√¢y - tƒÉng interval ƒë·ªÉ tr√°nh rate limiting
    storageMode: 'hybrid',
    syncDirection: 'download', // ∆Øu ti√™n download t·ª´ Google Sheets
    lastDataHash: ''
  };
};

export const AutoSyncProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [config, setConfig] = useState<AutoSyncConfig>(getConfigFromStorage);
  const [status, setStatus] = useState<AutoSyncStatus>({
    isRunning: false,
    lastSync: null,
    error: null,
    syncCount: 0,
    isConnected: false,
    queueLength: 0,
    isProcessing: false,
    lastDataUpdate: null,
    dataVersion: 0
  });

  const [showUpdateNotification, setShowUpdateNotification] = useState(false);
  const [isRateLimited, setIsRateLimited] = useState(false);

  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const isInitializedRef = useRef(false);
  const statusUpdateIntervalRef = useRef<NodeJS.Timeout | null>(null);

  // Lock ƒë·ªÉ tr√°nh multiple sync operations ƒë·ªìng th·ªùi
  const syncLockRef = useRef(false);

  // Ki·ªÉm tra k·∫øt n·ªëi Google Sheets
  const checkConnection = useCallback(async (): Promise<boolean> => {
    // N·∫øu ƒë√£ check r·ªìi th√¨ kh√¥ng check n·ªØa
    if (status.isConnected || status.error) {
      return status.isConnected;
    }

    try {
      const spreadsheetId = process.env.REACT_APP_GOOGLE_SPREADSHEET_ID;
      const clientEmail = process.env.REACT_APP_GOOGLE_SERVICE_ACCOUNT_EMAIL;
      const privateKey = process.env.REACT_APP_GOOGLE_PRIVATE_KEY;

      if (!spreadsheetId || !clientEmail || !privateKey) {
        setStatus(prev => ({ ...prev, isConnected: false, error: 'Thi·∫øu environment variables' }));
        return false;
      }

      const isConnected = await initializeGoogleSheets(spreadsheetId, clientEmail, privateKey);

      setStatus(prev => ({ 
        ...prev, 
        isConnected,
        error: isConnected ? null : 'Kh√¥ng th·ªÉ k·∫øt n·ªëi Google Sheets'
      }));

      return isConnected;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      setStatus(prev => ({ 
        ...prev, 
        isConnected: false, 
        error: `L·ªói k·∫øt n·ªëi: ${errorMessage}` 
      }));
      return false;
    }
  }, [status.isConnected, status.error]);

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ sync event service
  const updateStatusFromEventService = useCallback(() => {
    const queueStatus = syncEventService.getQueueStatus();
    setStatus(prev => ({
      ...prev,
      queueLength: queueStatus.queueLength,
      isProcessing: queueStatus.isProcessing,
      lastSync: queueStatus.lastSyncTime ? new Date(queueStatus.lastSyncTime).toLocaleString('vi-VN') : prev.lastSync
    }));
  }, []);

  // ƒê·ªçc d·ªØ li·ªáu t·ª´ Google Sheets
  const downloadDataFromSheets = useCallback(async (): Promise<boolean> => {
    try {
      console.log('üì• ƒêang t·∫£i d·ªØ li·ªáu t·ª´ Google Sheets...');
      
      const sheetsData = await syncDataFromGoogleSheets();
      
      if (sheetsData) {
        // C·∫≠p nh·∫≠t localStorage v·ªõi d·ªØ li·ªáu t·ª´ Google Sheets
        localStorage.setItem('thietBi', JSON.stringify(sheetsData.thietBi || []));
        localStorage.setItem('coSoVatChat', JSON.stringify(sheetsData.coSoVatChat || []));
        localStorage.setItem('lichSuSuDung', JSON.stringify(sheetsData.lichSuSuDung || []));
        localStorage.setItem('baoTri', JSON.stringify(sheetsData.baoTri || []));
        localStorage.setItem('thongBao', JSON.stringify(sheetsData.thongBao || []));
        localStorage.setItem('nguoiDung', JSON.stringify(sheetsData.nguoiDung || []));

        // T·∫°o hash m·ªõi cho d·ªØ li·ªáu
        const newHash = createDataHash(sheetsData);
        
        setConfig(prev => ({
          ...prev,
          lastDataHash: newHash
        }));

        setStatus(prev => ({
          ...prev,
          lastDataUpdate: new Date().toLocaleString('vi-VN'),
          dataVersion: prev.dataVersion + 1
        }));

        // Trigger event ƒë·ªÉ c√°c component c·∫≠p nh·∫≠t d·ªØ li·ªáu
        window.dispatchEvent(new CustomEvent('dataRefreshed'));

        // Hi·ªÉn th·ªã th√¥ng b√°o c·∫≠p nh·∫≠t
        setShowUpdateNotification(true);
        setTimeout(() => setShowUpdateNotification(false), 3000);

        console.log('‚úÖ T·∫£i d·ªØ li·ªáu th√†nh c√¥ng t·ª´ Google Sheets');
        return true;
      }
      return false;
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ Google Sheets:', error);
      
      // X·ª≠ l√Ω l·ªói rate limiting
      const errorMessage = error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      if (errorMessage.includes('429') || errorMessage.includes('rate limit')) {
        setIsRateLimited(true);
        setStatus(prev => ({
          ...prev,
          error: 'Rate limiting - T·∫°m d·ª´ng ƒë·ªìng b·ªô 30 gi√¢y...'
        }));
        
        // T·∫°m d·ª´ng auto-sync
        stopAutoSync();
        
        // Kh√¥i ph·ª•c sau 30 gi√¢y
        setTimeout(() => {
          setIsRateLimited(false);
          setStatus(prev => ({ ...prev, error: null }));
          if (config.isEnabled) {
            startAutoSync();
          }
        }, 30000); // 30s
      } else {
        setStatus(prev => ({
          ...prev,
          error: `L·ªói ƒë·ªìng b·ªô: ${errorMessage}`
        }));
      }
      
      return false;
    }
  }, []);

  // Ghi d·ªØ li·ªáu l√™n Google Sheets
  const uploadDataToSheets = useCallback(async (): Promise<boolean> => {
    try {
      console.log('üì§ ƒêang ghi d·ªØ li·ªáu l√™n Google Sheets...');
      
      // L·∫•y d·ªØ li·ªáu t·ª´ localStorage
      const localStorageData = {
        thietBi: thietBiService.getAll(),
        coSoVatChat: coSoVatChatService.getAll(),
        lichSuSuDung: lichSuSuDungService.getAll(),
        baoTri: baoTriService.getAll(),
        thongBao: thongBaoService.getAll(),
        nguoiDung: nguoiDungService.getAll()
      };

      // Sync l√™n Google Sheets
      await syncDataToGoogleSheets(localStorageData);

      console.log('‚úÖ Ghi d·ªØ li·ªáu th√†nh c√¥ng l√™n Google Sheets');
      return true;
    } catch (error) {
      console.error('‚ùå L·ªói khi ghi d·ªØ li·ªáu l√™n Google Sheets:', error);
      return false;
    }
  }, []);

  // Th·ª±c hi·ªán ƒë·ªìng b·ªô hai chi·ªÅu
  const performBidirectionalSync = useCallback(async (): Promise<boolean> => {
    try {
      console.log('üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô hai chi·ªÅu...');
      
      // 1. T·∫£i d·ªØ li·ªáu t·ª´ Google Sheets tr∆∞·ªõc (∆∞u ti√™n d·ªØ li·ªáu m·ªõi nh·∫•t)
      const downloadSuccess = await downloadDataFromSheets();
      
      // 2. Ghi d·ªØ li·ªáu l√™n Google Sheets (ch·ªâ n·∫øu download th√†nh c√¥ng)
      let uploadSuccess = true;
      if (downloadSuccess) {
        uploadSuccess = await uploadDataToSheets();
      }
      
      return downloadSuccess && uploadSuccess;
    } catch (error) {
      console.error('‚ùå L·ªói ƒë·ªìng b·ªô hai chi·ªÅu:', error);
      return false;
    }
  }, [downloadDataFromSheets, uploadDataToSheets]);

  // Th·ª±c hi·ªán sync v·ªõi lock
  const performSync = useCallback(async () => {
    // Ki·ªÉm tra lock
    if (syncLockRef.current) {
      console.log('üîÑ Sync ƒëang ch·∫°y, b·ªè qua request n√†y');
      return;
    }

    // Set lock
    syncLockRef.current = true;
    setStatus(prev => ({ ...prev, isProcessing: true }));

    try {
      console.log('üîÑ B·∫Øt ƒë·∫ßu sync...');
      
      let syncSuccess = false;
      
      // Th·ª±c hi·ªán sync theo h∆∞·ªõng ƒë∆∞·ª£c c·∫•u h√¨nh
      switch (config.syncDirection) {
        case 'upload':
          syncSuccess = await uploadDataToSheets();
          break;
        case 'download':
          syncSuccess = await downloadDataFromSheets();
          break;
        case 'bidirectional':
        default:
          syncSuccess = await performBidirectionalSync();
          break;
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i
      setStatus(prev => ({
        ...prev,
        isRunning: false,
        lastSync: new Date().toLocaleString('vi-VN'),
        syncCount: prev.syncCount + 1,
        error: syncSuccess ? null : 'L·ªói ƒë·ªìng b·ªô',
        isProcessing: false
      }));

      if (syncSuccess) {
        console.log('‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng');
      } else {
        console.log('‚ùå ƒê·ªìng b·ªô th·∫•t b·∫°i');
      }

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      console.error('‚ùå L·ªói ƒë·ªìng b·ªô:', errorMessage);
      setStatus(prev => ({
        ...prev,
        isRunning: false,
        error: `L·ªói ƒë·ªìng b·ªô: ${errorMessage}`,
        isProcessing: false
      }));
    } finally {
      // Release lock
      syncLockRef.current = false;
    }
  }, [config.syncDirection, uploadDataToSheets, downloadDataFromSheets, performBidirectionalSync]);

  // Force download d·ªØ li·ªáu t·ª´ Google Sheets (∆∞u ti√™n cao nh·∫•t)
  const forceDownloadFromSheets = useCallback(async (): Promise<boolean> => {
    try {
      console.log('üîÑ Force download d·ªØ li·ªáu t·ª´ Google Sheets...');
      
      const success = await downloadDataFromSheets();
      
      if (success) {
        console.log('‚úÖ Force download th√†nh c√¥ng');
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        alert('‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ Google Sheets');
      } else {
        console.log('‚ùå Force download th·∫•t b·∫°i');
        alert('‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ Google Sheets');
      }
      
      return success;
    } catch (error) {
      console.error('‚ùå L·ªói force download:', error);
      alert('‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu');
      return false;
    }
  }, [downloadDataFromSheets]);

  // Refresh data t·ª´ Google Sheets
  const refreshData = useCallback(async () => {
    if (syncLockRef.current) {
      console.log('üîÑ Sync ƒëang ch·∫°y, b·ªè qua refresh');
      return;
    }

    syncLockRef.current = true;
    setStatus(prev => ({ ...prev, isProcessing: true }));

    try {
      console.log('üîÑ ƒêang refresh d·ªØ li·ªáu...');
      const success = await downloadDataFromSheets();
      
      setStatus(prev => ({
        ...prev,
        isProcessing: false,
        error: success ? null : 'L·ªói refresh d·ªØ li·ªáu'
      }));

      if (success) {
        console.log('‚úÖ Refresh d·ªØ li·ªáu th√†nh c√¥ng');
        // Trigger re-render cho c√°c component
        window.dispatchEvent(new CustomEvent('dataRefreshed'));
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        alert('‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ Google Sheets');
      }
    } catch (error) {
      console.error('‚ùå L·ªói refresh d·ªØ li·ªáu:', error);
      setStatus(prev => ({
        ...prev,
        isProcessing: false,
        error: 'L·ªói refresh d·ªØ li·ªáu'
      }));
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      alert('‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu');
    } finally {
      syncLockRef.current = false;
    }
  }, [downloadDataFromSheets]);

  // B·∫Øt ƒë·∫ßu auto-sync
  const startAutoSync = useCallback(() => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }

    if (config.isEnabled && config.interval > 0 && !isRateLimited) {
      // Th·ª±c hi·ªán sync ngay l·∫≠p t·ª©c
      performSync();
      
      // Thi·∫øt l·∫≠p interval cho auto sync
      intervalRef.current = setInterval(performSync, config.interval * 1000);
      setStatus(prev => ({ ...prev, isRunning: true }));
    }
  }, [config.isEnabled, config.interval, performSync, isRateLimited]);

  // D·ª´ng auto-sync
  const stopAutoSync = useCallback(() => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
    setStatus(prev => ({ ...prev, isRunning: false }));
  }, []);

  // Force sync ngay l·∫≠p t·ª©c
  const forceSync = useCallback(async () => {
    // Ki·ªÉm tra lock
    if (syncLockRef.current) {
      console.log('üîÑ Sync ƒëang ch·∫°y, b·ªè qua force sync');
      return;
    }

    // Th·ª±c hi·ªán sync
    await performSync();
  }, [performSync]);

  // C·∫≠p nh·∫≠t config
  const updateConfig = useCallback((newConfig: Partial<AutoSyncConfig>) => {
    const updatedConfig = { ...config, ...newConfig };
    setConfig(updatedConfig);
    saveConfigToStorage(updatedConfig);
    
    // Restart auto-sync n·∫øu c·∫ßn
    if (updatedConfig.isEnabled) {
      startAutoSync();
    } else {
      stopAutoSync();
    }
  }, [config, startAutoSync, stopAutoSync]);

  // Sync th·ªß c√¥ng
  const performManualSync = useCallback(async () => {
    await performSync();
  }, [performSync]);

  // Reset stats
  const resetStats = useCallback(() => {
    setStatus(prev => ({
      ...prev,
      syncCount: 0,
      lastSync: null,
      error: null
    }));
    syncEventService.clearQueue();
  }, []);

  // Kh·ªüi t·∫°o khi component mount
  useEffect(() => {
    if (!isInitializedRef.current) {
      isInitializedRef.current = true;
      
      // Ki·ªÉm tra k·∫øt n·ªëi ban ƒë·∫ßu
      checkConnection();
      
      // Lu√¥n t·∫£i d·ªØ li·ªáu t·ª´ Google Sheets khi kh·ªüi ƒë·ªông
      downloadDataFromSheets().then((success) => {
        if (success) {
          console.log('‚úÖ Kh·ªüi t·∫°o d·ªØ li·ªáu th√†nh c√¥ng t·ª´ Google Sheets');
        } else {
          console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ Google Sheets, s·ª≠ d·ª•ng d·ªØ li·ªáu local');
        }
        
        // B·∫Øt ƒë·∫ßu auto-sync sau khi t·∫£i d·ªØ li·ªáu
        if (config.isEnabled) {
          startAutoSync();
        }
      });

      // Thi·∫øt l·∫≠p interval ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ event service
      statusUpdateIntervalRef.current = setInterval(updateStatusFromEventService, 5000);
    }
  }, [config.isEnabled, checkConnection, downloadDataFromSheets, startAutoSync, updateStatusFromEventService]);

  // Cleanup khi unmount
  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
      if (statusUpdateIntervalRef.current) {
        clearInterval(statusUpdateIntervalRef.current);
      }
    };
  }, []);

  const value: AutoSyncContextType = {
    config,
    status,
    updateConfig,
    startAutoSync,
    stopAutoSync,
    performManualSync,
    resetStats,
    forceSync,
    refreshData,
    forceDownloadFromSheets,
    showUpdateNotification,
    isRateLimited
  };

  return (
    <AutoSyncContext.Provider value={value}>
      {children}
    </AutoSyncContext.Provider>
  );
};

export const useAutoSync = (): AutoSyncContextType => {
  const context = useContext(AutoSyncContext);
  if (context === undefined) {
    throw new Error('useAutoSync must be used within an AutoSyncProvider');
  }
  return context;
}; 